{"code":"import onFlipKeyUpdate from '../../src/flip';\r\nimport getFlippedElementPositionsBeforeUpdate from '../../src/flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate';\r\nimport { assign } from '../../src/utilities';\r\nclass Flipper {\r\n    constructor(options) {\r\n        this.applyTransformOrigin = true;\r\n        this.retainTransform = false;\r\n        assign(this, options);\r\n        this.inProgressAnimations = {};\r\n        this.flipCallbacks = {};\r\n        this.recordBeforeUpdate = this.recordBeforeUpdate.bind(this);\r\n        this.onUpdate = this.onUpdate.bind(this);\r\n        this.addFlipped = this.addFlipped.bind(this);\r\n        this.addInverted = this.addInverted.bind(this);\r\n    }\r\n    recordBeforeUpdate() {\r\n        this.snapshot = getFlippedElementPositionsBeforeUpdate({\r\n            element: this.element,\r\n            flipCallbacks: this.flipCallbacks,\r\n            inProgressAnimations: this.inProgressAnimations\r\n        });\r\n    }\r\n    onUpdate(prevDecisionData, currentDecisionData) {\r\n        if (this.snapshot) {\r\n            onFlipKeyUpdate({\r\n                flippedElementPositionsBeforeUpdate: this.snapshot\r\n                    .flippedElementPositions,\r\n                cachedOrderedFlipIds: this.snapshot.cachedOrderedFlipIds,\r\n                containerEl: this.element,\r\n                inProgressAnimations: this.inProgressAnimations,\r\n                flipCallbacks: this.flipCallbacks,\r\n                applyTransformOrigin: this.applyTransformOrigin,\r\n                spring: this.spring,\r\n                debug: this.debug,\r\n                staggerConfig: this.staggerConfig,\r\n                handleEnterUpdateDelete: this.handleEnterUpdateDelete,\r\n                retainTransform: this.retainTransform,\r\n                decisionData: {\r\n                    prev: prevDecisionData,\r\n                    current: currentDecisionData\r\n                },\r\n                onComplete: this.onComplete\r\n            });\r\n            delete this.snapshot;\r\n        }\r\n    }\r\n    addFlipped({ element, flipId, opacity, translate, scale, transformOrigin, spring, stagger, onAppear, onStart, onSpringUpdate, onComplete, onExit, shouldFlip, shouldInvert }) {\r\n        if (!element) {\r\n            throw new Error('no element provided');\r\n        }\r\n        if (!flipId) {\r\n            throw new Error('No flipId provided');\r\n        }\r\n        const flipConfig = {\r\n            scale,\r\n            translate,\r\n            opacity,\r\n            transformOrigin,\r\n            spring,\r\n            stagger\r\n        };\r\n        if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\r\n            assign(flipConfig, {\r\n                translate: true,\r\n                scale: true,\r\n                opacity: true\r\n            });\r\n        }\r\n        if (flipId) {\r\n            element.dataset.flipId = flipId;\r\n        }\r\n        element.dataset.flipConfig = JSON.stringify(flipConfig);\r\n        // finally, add callbacks\r\n        this.flipCallbacks[flipId] = {\r\n            shouldFlip,\r\n            shouldInvert,\r\n            onAppear,\r\n            onStart,\r\n            onSpringUpdate,\r\n            onComplete,\r\n            onExit\r\n        };\r\n    }\r\n    addInverted({ element, parent, opacity, translate, scale, transformOrigin }) {\r\n        if (!element) {\r\n            throw new Error('no element provided');\r\n        }\r\n        if (!parent) {\r\n            throw new Error('parent must be provided');\r\n        }\r\n        const inverseFlipId = parent.dataset.flipId;\r\n        const flipConfig = {\r\n            scale,\r\n            translate,\r\n            opacity,\r\n            transformOrigin\r\n        };\r\n        if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\r\n            assign(flipConfig, {\r\n                translate: true,\r\n                scale: true,\r\n                opacity: true\r\n            });\r\n        }\r\n        element.dataset.inverseFlipId = inverseFlipId;\r\n        element.dataset.flipConfig = JSON.stringify(flipConfig);\r\n    }\r\n}\r\nexport default Flipper;\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,eAAe,MAAM,gBAAgB,CAAA;AAC5C,OAAO,sCAAsC,MAAM,kFAAkF,CAAA;AACrI,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAA;AAa5C,MAAM,OAAO;IAgBX,YAAY,OASX;QAtBO,yBAAoB,GAAY,IAAI,CAAA;QAUpC,oBAAe,GAAY,KAAK,CAAA;QAatC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;QAErB,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAA;QAC9B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAA;QAEvB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC5D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACxC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAC5C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAChD,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,QAAQ,GAAG,sCAAsC,CAAC;YACrD,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,oBAAoB,EAAE,IAAI,CAAC,oBAAoB;SAChD,CAAC,CAAA;IACJ,CAAC;IACD,QAAQ,CAAC,gBAAqB,EAAE,mBAAwB;QACtD,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,eAAe,CAAC;gBACd,mCAAmC,EAAE,IAAI,CAAC,QAAQ;qBAC/C,uBAAuB;gBAC1B,oBAAoB,EAAE,IAAI,CAAC,QAAQ,CAAC,oBAAoB;gBACxD,WAAW,EAAE,IAAI,CAAC,OAAO;gBACzB,oBAAoB,EAAE,IAAI,CAAC,oBAAoB;gBAC/C,aAAa,EAAE,IAAI,CAAC,aAAa;gBACjC,oBAAoB,EAAE,IAAI,CAAC,oBAAoB;gBAC/C,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,aAAa,EAAE,IAAI,CAAC,aAAa;gBACjC,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;gBACrD,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,YAAY,EAAE;oBACZ,IAAI,EAAE,gBAAgB;oBACtB,OAAO,EAAE,mBAAmB;iBAC7B;gBACD,UAAU,EAAE,IAAI,CAAC,UAAU;aAC5B,CAAC,CAAA;YACF,OAAO,IAAI,CAAC,QAAQ,CAAA;SACrB;IACH,CAAC;IAED,UAAU,CAAC,EACT,OAAO,EACP,MAAM,EACN,OAAO,EACP,SAAS,EACT,KAAK,EACL,eAAe,EACf,MAAM,EACN,OAAO,EACP,QAAQ,EACR,OAAO,EACP,cAAc,EACd,UAAU,EACV,MAAM,EACN,UAAU,EACV,YAAY,EAC4B;QACxC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;SACvC;QACD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;SACtC;QACD,MAAM,UAAU,GAAG;YACjB,KAAK;YACL,SAAS;YACT,OAAO;YACP,eAAe;YACf,MAAM;YACN,OAAO;SACR,CAAA;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrE,MAAM,CAAC,UAAU,EAAE;gBACjB,SAAS,EAAE,IAAI;gBACf,KAAK,EAAE,IAAI;gBACX,OAAO,EAAE,IAAI;aACd,CAAC,CAAA;SACH;QACD,IAAI,MAAM,EAAE;YACV,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,MAAM,CAAA;SAChC;QACD,OAAO,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;QACvD,yBAAyB;QACzB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG;YAC3B,UAAU;YACV,YAAY;YACZ,QAAQ;YACR,OAAO;YACP,cAAc;YACd,UAAU;YACV,MAAM;SACP,CAAA;IACH,CAAC;IAED,WAAW,CAAC,EACV,OAAO,EACP,MAAM,EACN,OAAO,EACP,SAAS,EACT,KAAK,EACL,eAAe,EAQhB;QACC,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;SACvC;QACD,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;SAC3C;QAED,MAAM,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAA;QAC3C,MAAM,UAAU,GAAG;YACjB,KAAK;YACL,SAAS;YACT,OAAO;YACP,eAAe;SAChB,CAAA;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrE,MAAM,CAAC,UAAU,EAAE;gBACjB,SAAS,EAAE,IAAI;gBACf,KAAK,EAAE,IAAI;gBACX,OAAO,EAAE,IAAI;aACd,CAAC,CAAA;SACH;QACD,OAAO,CAAC,OAAO,CAAC,aAAa,GAAG,aAAa,CAAA;QAC7C,OAAO,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;IACzD,CAAC;CACF;AAED,eAAe,OAAO,CAAA\"}","dts":{"name":"/Users/alexholachek/Desktop/dev/react-flip-toolkit/packages/flip-toolkit/packages/flip-toolkit/index.d.ts","writeByteOrderMark":false,"text":"import { StaggerConfig, HandleEnterUpdateDelete, OnFlipperComplete } from '../../src/Flipper/types';\r\nimport { FlippedProps } from '../../src/Flipped/types';\r\nimport { SpringOption } from '../../src/springSettings/types';\r\ndeclare class Flipper {\r\n    private element;\r\n    private staggerConfig;\r\n    private applyTransformOrigin;\r\n    private handleEnterUpdateDelete;\r\n    private debug;\r\n    private spring;\r\n    private inProgressAnimations;\r\n    private flipCallbacks;\r\n    private snapshot;\r\n    private retainTransform;\r\n    private onComplete;\r\n    constructor(options: {\r\n        element: HTMLElement;\r\n        staggerConfig: StaggerConfig;\r\n        spring: SpringOption;\r\n        applyTransformOrigin: boolean;\r\n        handleEnterUpdateDelete: HandleEnterUpdateDelete;\r\n        debug: boolean;\r\n        retainTransform: boolean;\r\n        onComplete: OnFlipperComplete;\r\n    });\r\n    recordBeforeUpdate(): void;\r\n    onUpdate(prevDecisionData: any, currentDecisionData: any): void;\r\n    addFlipped({ element, flipId, opacity, translate, scale, transformOrigin, spring, stagger, onAppear, onStart, onSpringUpdate, onComplete, onExit, shouldFlip, shouldInvert }: FlippedProps & {\r\n        element: HTMLElement;\r\n    }): void;\r\n    addInverted({ element, parent, opacity, translate, scale, transformOrigin }: {\r\n        element: HTMLElement;\r\n        parent: HTMLElement;\r\n        opacity: boolean;\r\n        translate: boolean;\r\n        scale: boolean;\r\n        transformOrigin: string;\r\n    }): void;\r\n}\r\nexport default Flipper;\r\n"}}
